/**********************************************************
* Project 1: Metro Simulator
* CS 15
* README
* Author: Dan Glorioso (dglori02)
* Date: 10/01/2023
*
*********************************************************/

Compile/run:
     - Compile using
            make MetroSim
     - run executable with
            ./MetroSim stationsFile passFile [commands]


Program Purpose:
     The purpose of this program is to simulate a metro system.  The
     program will read in a list of stations, and then
     simulate the movement of trains and passengers. The program will either 
     read in a list of commands from a file or from cin.


Acknowledgements: 
     I worked on this project independetly. I used cplusplus.com/reference/
     list/list/ as a reference for my list implementation and construction. I 
     also used the provided the_metroSim program as a reference for my 
     implementation of the simulator and to test the functionality of different
     edge cases in the simulator. My implementation of the simulator is based 
     off of the provided the_metroSim.cpp file. I used the provided isprime.cpp
     example from lecture as a reference for my implementation of the file 
     reading at the beginning of the simulator 
     (https://www.cs.tufts.edu/comp/15/schedule/lectures/file_io/code/
     isprime.cpp). For my inputted that required reading in a file, I used
     the C++ website to learn how to read in a line and store the information
     within a line into a string and variables that could be passed in through
     another function (https://cplusplus.com/reference/sstream/stringstream/). 


Files: 

main.cpp:
     Main function for the MetroSim program. The main driver of the program 
     that simulates a train system that has a train that moves between stations
     and passengers that board and exit the train.

MetroSim.cpp:
     Main functionality of running the Metro Simulation, should be able to
     move trains and deal with passengers going on/off the train. 
     Implementation of the MetroSim class and its functions that are
     used in the MetroSim program, which include prompt_and_execute functions 
     for both cin and file inputs, initalize, getStations,  printSimulation, 
     finishSim, addPassengers, moveTrain, and getters.

MetroSim.h:
     Declaration of the MetroSim class and its functions that are
     used in the MetroSim program, which include prompt_and_execute functions 
     for both cin and file inputs, initalize, getStations,  printSimulation, 
     finishSim, addPassengers, moveTrain, and getters.

stations.txt:
     an example file containing a list of stations.

stations2.txt:
     an example file containing a list of stations.

stations3.txt:
     an example file containing a list of stations.

test_commands.txt:
     sample list of commands that you could give to the simulator

test_commands2.txt:
     sample list of commands that you could give to the simulator

test_commands3.txt:
     sample list of commands that you could give to the simulator

test_commands4.txt:
     sample list of commands that you could give to the simulator

the_metroSim:
     reference implementation for students to see how 

Passenger.h:
     Declaration of the Passenger class and its function that is used in the 
     MetroSim program, which is print.

Passenger.cpp:
     Implementation of the Passenger class and its function that is used in the 
     MetroSim program, which is print.

PassengerQueue.h:
     Declaration of PassengerQueue class and its functions that are used in the 
     MetroSim program, including enqueue, dequeue, size, and print.

PassengerQueue.cpp:
     Implementation of the PassengerQueue class and its functions that are used 
     in the MetroSim program, including enqueue, dequeue, size, and print.

Stations.cpp:
     Implementation of the Stations class and its functions that are used in 
     the MetroSim program, which are addPassengers, clearStation, addStation, 
     getNumStations, getStationName, getStationQueue, and print.

Stations.h:
     Declaration of the Stations class and its functions that are used in the 
     MetroSim program, which are addPassengers, clearStation, addStation, 
     getNumStations, getStationName, getStationQueue, and print.

Train.cpp:
     Implementation of the Train class and its functions that are used in the 
     MetroSim program, which include the constructor, addQueues, print, 
     emptyPassengers, and boardPassengers.

Train.h: 
     Declaration of the Train class and its functions that are used in the 
     MetroSim program, which include the constructor, addQueues, print, 
     emptyPassengers, and boardPassengers.

unit_test.h:
     To test the Passenger, PassengerQueue classes using the provided 
     unit_test.h framework. 

Makefile:
     Makefile compiles the program with the command "make MetroSim"

Data Structures:
     To store my passengers in the simulator, I used a C++ build in list 
     to store the passengers. I used a list because I wanted to be able to
     access the passengers with the lowest complexity possible. I also used 
     a list because I wanted to be able to add and remove passengers from the
     list without having to worry about the size of the list. THe build in
     lists within C++ made it easy to create a list that had built-in functions
     that I could call in my other functions to perform tasks. For my station 
     and train, I used a vector of PassengerQueues to store the passengers for 
     that particular station or train. I used a vector because I wanted to be 
     able to access and manipulate these queues efficiently, as vectors provide
     constant-time access to elements and allow the vector to be dynamicically 
     resized when needed. The vector was the simplest way to store the list of
     queues in a way that allowed for the data within the queues to be accessed
     by calling functions in the station and train classes. 

Testing:

     For my Passenger and PassengerQueue classes, I used the provided 
     unit_test.h to test the functionality of each element in the classes. I 
     thoroughly tested each function and member variable with unit tests after 
     writing each step and ran the unit_test function to ensure it was 
     implemented correctly. I also used the provided test_commands.txt to test 
     the functionality of the simulator. I also tested the functionality of the
     simulator with both cin and a command file. I tested my program against a 
     series of edge cases that I first tesed on the the_MetroSim program to 
     observe its functionality. Some edge cases includes: a passengers 
     boarding and disbarking at the same station, the train reaching the final 
     staiton and looping around passengers boarding a 
     station that has already been passed. In addition, I also create 
     a number of test command files to test the functionality of the simulator
     against the functionality of the demo program. I create the files
     test_commands2.txt, test_commands3.txt, and test_commands4.txt to test 
     different functions on the station lists. I specifically made
     test_commands4.txt include edge cases that I wanted to test. Using the 
     information in the design spec, I used the command 
     ./MetroSim stations.txt output.txt commands.txt > stdout.txt to compare
     the stdout for both the_MetroSim and my program. Every time I tested with
     the stdout command, I diff checked my output versus the output the demo
     program outputted given the same station and list of commands. In
     addition, I create a number of test station files containing different
     station names and different numbers of stations to test the functionality
     of my program against the demo. For each command and station, I tested
     each combination and then diff checked the result to ensure they were the
     same output. 
     

Note: This assignment comes partially implemented, but student must also
create the driver and add class functionality.

Part that you found most difficult:

     I found the most difficult part of this assignment to be setting up the 
     vectors of PassengerQueues for the stations and train. At first, it was 
     tricky to figure out how to access the different functions for each 
     PassengerQueue within each vector. For the most part, I tried my best to 
     not repeat code that could be written using a helper function, so it was a
     lot of rewriting to ensure I was not repeating myself when possible. I 
     also found it try implementing both cin and a commmand file while still 
     trying to use the same function definitions. I had to make some changes 
     to my functions to make them work with both cin and a command file.
     Another slight difficulty for me in this project was figuring out how to
     implement the moveTrain function. I had to think about the processes that
     occurred everytime the train moves and then had to translate those steps
     into code. 

Time Spent: 35 hours
